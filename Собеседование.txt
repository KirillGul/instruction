1. Что такое ссылки?
    Ссылки в PHP - это псевдоним (алиас), который позволяет присвоить двум переменным одинаковое значение.
    Ссылки в PHP - аналог жёстких ссылок в файловых системах Unix.
        
2. Каковы основные операции с использованием ссылок?
    https://evilinside.ru/ssylki-v-php-kak-oni-rabotayut-i-kogda-ix-ispolzovat/#
    Есть три основных операции с использованием ссылок: 
        присвоение по ссылке, 
        передача по ссылке 
        и возврат по ссылке.

3. Назовите простые типы данных, поддерживаемые в РНР.
    числовой (integer)
    вещественный (float)
    текстовый (string)
    булев (boolean)

4. Что такое инкремент и декремент, в чем разница между префиксным и постфиксным инкрементом и декрементом?
    инкремент ++
    декремент --

    префиксный ++$i
    постфиксный $i++

5. Что такое рекурсия?
    Это, когда функция вызовает саму себя.

6. В чем разница между =, == и ===?
    = - присваивание
    == - сравнение (без учета типа переменной)
    === - сравнение (с учетом типа переменной)

8. Какая система типов используется в PHP? Опишите плюсы и минусы.
    PHP — язык с динамической типизацией. 
    Типы не жестко привязаны к переменным, т.е. в одну и туже переменную можно класть что угодно и как угодно. 
    В этом есть плюсы и минусы: это удобно, но опасно с точки зрения секьюрити. 
    Важно не использовать одну переменную для хранения разных типов данных.

9. Чем отличаются ключевые слова: include и require, mysql_connect и mysql_pconnect?
    require аналогично include, за исключением того, что в случае возникновения ошибки он также выдаст фатальную ошибку уровня E_COMPILE_ERROR. 
        Другими словами, он остановит выполнение скрипта, 
        тогда как include только выдал бы предупреждение E_WARNING, которое позволило бы скрипту продолжить выполнение.
        mysqli (устар. mysql_connect) - создание соединения с базой данных
        mysqli (устар. mysql_pconnect) - создание постоянного соединения с базой данных.
            В отличие от модуля mysql, в mysqli нет отдельной функции для создания постоянных соединений. 
            Чтобы открыть постоянное соединение, при создании подключения к имени хоста нужно добавить префикс p:.

            или PDO::ATTR_PERSISTENT => true

17. Что такое traits? Альтернативное решение? Приведите пример.
    Трейт - это механизм обеспечения повторного использования кода в языках с поддержкой только одиночного наследования, таких как PHP.
    Нет или возможно описывать каждый метод заново в каждом классе.

18. Опишите поведение при использовании traits с одинаковыми именами полей и / или методов.
    Разрешение конфликтов trait, если одинаковые имена методов:
	insteadof (переводится вместо чего-то)
	синтаксис тут следующий: вначале имя трейта, потом два двоеточия, потом имя метода, потом наш оператор insteadof и имя второго трейта.
	Пример 1: 
	[
	class Test
	{
		use Trait1, Trait2 {
			Trait1::method insteadof Trait2;
			//или
			//можно добавить альяс и использовать второй метод под другим именем, можно и первый использовать под другим именем (необязательно)
			//	use Trait1, Trait2 {
			//		Trait1::method insteadof Trait2;
			//		Trait1::method as method1; (необязательно)
			//		Trait2::method as method2;
			//	}
		
		}
	}
	]

19. Будут ли доступны частные методы trait в классе?
    Да.

20. Можно ли компоновать traits в trait?
    Да. С помощью use.

21. Расскажите об обработке ошибок и исключения (try catch, finaly и throw).
    throw() - бросить исключение
    try {} - блок чтобы поймать исключение
    catch {} - блок чтобы отработать пойманное исключение
    finaly {} - блок который всегда выполняется

22. Что такое type hinting, как работает, зачем нужен?
    Явное указание типов.

23. Что такое namespace-ы и зачем они нужны?
    namespace - это простаранство имён, к которому относятся определенные свойства, функции, классы и их методы (помогает избежать конфликты имён).
    Также в дальнейшем если следовать стандарту PSR-0 ил PSR-4 помогает с автозагрузкой классов.

24. Сравнение значений переменных в РНР и подводные камни? Приведение типов. Что изменилось в PHP 8 в этом контексте?
     До PHP 8.0.0, если строка (string) сравнивалась с числом или строкой, содержащей число, то строка (string) преобразовывалось в число перед выполнением сравнения. Это могло привести к неожиданным результатам, что можно увидеть на следующем примере:
        var_dump(0 == "a");
        var_dump("1" == "01");
        var_dump("10" == "1e1");
        var_dump(100 == "1e2");

        switch ("a") {
        case 0:
            echo "0";
            break;
        case "a":
            echo "a";
            break;

25. Как работает session в РНР, где хранится, как инициализируется?
    https://www.php.net/manual/ru/book.session.php
    http://lifeexample.ru/php-primeryi-skriptov/php-rabota-s-sessiyami.html

    PHPSESSID: 05eaah2ll02id3ds888vtkfht04

    - Когда сессия создана, PHP будет либо получать существующую сессию, используя переданный идентификатор (обычно из сессионного cookie) или, 
    если ничего не передавалось, будет создана новая сессия. PHP заполнит суперглобальную переменную $_SESSION сессионной информацией после того, 
    как будет запущена сессия. Когда PHP завершает работу, он автоматически сериализует содержимое суперглобальной переменной $_SESSION и отправит для сохранения, 
    используя сессионный обработчик для записи сессии. 
    - Храниться в суперглобальном массиве $_SESSION
    - Инициализируется через session_start или в ini файле с помощью session.auto_start 
        (При включённом session.auto_start единственным способом помещения объектов в сессию останется загрузка описаний класса с помощью auto_prepend_file.
        В противном случае придётся выполнить сериализацию (serialize()) и десериализацию (unserialize()) объекта вручную.)

26. Суперглобальные массивы. Какие знаете? Как использовали?
    $GLOBALS
    $_SERVER
    $_GET
    $_POST
    $_FILES
    $_REQUEST
    $_COOKIE
    $_SESSION
    $_ENV
    $http_response_header
    $argc
    $argv

27. Сравните include vs required, include_once vs required_once.
    include vs required - выполняют одинаковые действия (вставка кода в файл)
    include_once vs required_once - то же самое плюс проверка "не был ли включен данный файл ранее"

    Общее различие обработка ошибок - при include выполнение скипта продолжается, а при required будет фатальная ошибка.

28. Что означает сложность алгоритма?
    


Практические задания

93. Спроектируйте базу данных для хранения информации о книгах и их авторах. Напишите запрос для выборки всех авторов и количества написанных ими книг.
    