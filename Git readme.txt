-----------------
Основные команды:
-----------------
Обычно главный репозиторий называется origin. - В локальном репозитории или удаленном Github.

git status - узнать статус файлов

git add "hello.txt" - добавить файл для отслеживание в git
git add -A - добавить всех файлов в директории
        git add . - добавить текущую папку

git commit -m "Initial commit." ваш_каталог_или_файл - создаст новый коммит со всеми изменениями из области подготовки.
                                    Ключ -m и сообщение «Initial commit.» — это созданное пользователем описание всех изменений, 
                                    включенных в коммит. (P.S. Сохранение как в игре)
Атрубуты commit -  -m, ваш комментарий
                   -a, означает, что нужно применить действие ко всем измененным файлам.

Восстановление сохранения:
-------------------------
git log - отслеживание изменений, сделанных в коммитах
git show b10cc123 - как вы можете заметить, идентификаторы довольно длинные, но для работы с ними не обязательно копировать их целиком — 
                    первых нескольких символов будет вполне достаточно. 
                    Чтобы посмотреть, что нового появилось в коммите, мы можем воспользоваться командой show [commit].
git diff 09bd8cc..ba25c0ff - чтобы увидеть разницу между двумя коммитами

До команды git add:
git checkout -- index.html - файл в котором хотим отменить изменения
git checkout . - отмена изменений во всех файлах

После команды git add перед commit:
git reset index.html - отмена файла
git checkout -- index.html - файл в котором хотим отменить изменения

git reset . - отмена изм. всех файлов
git checkout . - отмена изменений во всех файлах

После commit:
git reset --hard HEAD^1 - вернуться на один commit назад с помощью "жесткого" сброса
git reset --soft HEAD^1 - вернуться на один commit назад с помощью "мягкого" сброса 
                        (т.е. коммит уйдет но изменения в файле остануться, переход в статус после команды git add перед commit)
-------------------------
git remote add origin https://github.com/...... - добавление удаленного репозитория
git remote rm origin - удаление удаленного репозитория "origin"

git push - отправка изменений на сервер
git push -u origin master - отправка изменений на сервер (определённой ветки)
    Push. Она принимает два параметра: имя удаленного репозитория (мы назвали наш origin) 
    и ветку, в которую необходимо внести изменения (master — это ветка по умолчанию для всех репозиториев).

git pull origin master - запрос изменений с сервера с репозитория origin ветки master

----------------------
Дополнтильные команды:
----------------------
Ветвление - Во время разработки новой функциональности считается хорошей практикой работать с копией оригинального проекта, которую называют веткой.
    Ветви имеют свою собственную историю и изолированные друг от друга изменения до тех пор, пока вы не решаете слить изменения вместе. 
    Это происходит по набору причин:
        - Уже рабочая, стабильная версия кода сохраняется.
        - Различные новые функции могут разрабатываться параллельно разными программистами.
        - Разработчики могут работать с собственными ветками без риска, что кодовая база поменяется из-за чужих изменений.
        - В случае сомнений, различные реализации одной и той же идеи могут быть разработаны в разных ветках и затем сравниваться.
Обзор веток:
git branch - увидеть существующие ветки, можно добавить (-v), чтобы увидеть последний commmit в ветке
    Атрибуты веток:
        -v - увидеть последний commmit в ветке
        -m новое_имя - переименовать текущую ветку

Создание ветки:
git branch имя_ветки - создание новой ветки

Переключение веток:
git checkout имя_ветки - переключиться на ветку

После commit вернуться к данному commit и создать ветку:
git checkout 09bd8cc1 - перейти к данному Commit-у
git branch имя_ветки - создание новой ветки

Слияние веток:
git merge имя_ветки - нужно переключиться на ту ветку к которой мы хотим слить и ввести команду

Удаление ветки:
git branch -d имя_ветки

Алиасы:
[alias]
    s = status --short
	st = status
	l = log --oneline --graph --decorate --all
	g = log --graph --abbrev-commit --decorate --all --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(dim white) - %an%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n %C(white)%s%C(reset)'
	br = branch
	co = checkout


Копирование репозитория:
git clone https://github.com/{путь и название}.git
