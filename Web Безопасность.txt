Порт:
    80 - HTTP
    443- HTTPS

Brute Force - метод атаки грубой силы. Перебор всех возможных вариантов пароля. Желательно не меньше 6 символов делать.
    Атаки грубой силой больше не являются угрозой благодаря политике паролей, ограниченным попыткам входа в систему и капчам.

1) Code injection - внедрение кода (https://xak.guru/threads/13504/)
    Защита:
        1) $page = str_replace("/","",$page); // Блокируется возможность перехода в другие дирректории.
        2) if (file_exists("$page.htm ")) {} // Проверка существования файла
        3) Строгий вывод определенных файлов например через switch ($_GET['module'])

        Защита достигается за счёт проверки на сущетвование файла.

2) SQL injection - SQL инъекции (https://www.internet-technologies.ru/articles/rukovodstvo-po-sql-inekciyam-izuchaem-na-primerah.html)
    Это атака, которая задействует динамические операторы SQL, вынося в комментарии определенные части инструкций или добавляя условие, 
    которое всегда будет истинным. Она нацелена на дыры в архитектуре веб-приложений и использует операторы SQL для выполнения вредоносного SQL-кода.
	
	Пример: нужно знать логин, а в пароль вбить: 1' or 1=1 -- d
											или	1" or 1=1 -- d
                                            или вытащить что-то из бызы, добавив union: http://адерс.ком/?id=-1 union select поля from users where login='admin'
                                                -1 обязательно, чтобы ни чего не было найдено
                                            или payload Иван Румак: '"></title/</script/</style/--><iframe/onload='alert``'

    Защита:
        - для каждого параметра нужно преобразовывать:
            тип (int) для числовых
                Пример: $id = (int)$_GET['id']
            для строковых
                Пример: Использовать mysqli_real_escape_string(), Экранировать надо все поля ввода в форме

        1) Ввод пользовательских данных не должен быть доверенным. Его всегда нужно санировать, прежде чем данные будут использоваться в динамических операциях SQL.
        2) Хранимые процедуры — они могут инкапсулировать SQL-запросы и обрабатывать все входные данные в качестве параметров.
        3) Подготовленные запросы — сначала создаются запросы, а затем все предоставленные пользовательские данные обрабатываются в качестве параметров. 
            Это не влияет на синтаксис инструкции SQL.
        4) Регулярные выражения — могут быть использованы для обнаружения потенциально вредоносного кода и его удаления перед выполнением операторов SQL.
        5) Права доступа на подключение к базе данных – чтобы защититься от SQL инъекций, учетным записям, которые используются для подключения к базе данных, 
            должны предоставляться только необходимые права доступа. Это поможет ограничить действия, которые SQL-операторы могут выполнять на сервере.
        6) Сообщения об ошибках — не должны раскрывать конфиденциальную информацию. Простые пользовательские сообщения об ошибках, 
            такие как «Извините, возникла техническая ошибка. Служба поддержки уже уведомлена о ней. Повторите попытку позже», 
            можно использовать вместо отображения запросов SQL, вызвавших ошибку.
        Доп.рекомендации:    
			1) https://ru.stackoverflow.com/questions/393450/%D0%93%D1%80%D0%B0%D0%BC%D0%BE%D1%82%D0%BD%D0%B0%D1%8F-%D0%B7%D0%B0%D1%89%D0%B8%D1%82%D0%B0-%D0%BE%D1%82-sql-injection
            2) Использовать mysqli_real_escape_string(), Экранировать надо все поля ввода в форме
			3) Лучше использовать PDO
            4) И использовать фильтры PHP https://www.php.net/manual/ru/book.filter.php
            5) Не выводить ошибки в браузер в prodaction
            6) В команде mysqli_query() or die(mysqli_error()) обязательно убирать mysqli_error(), т.к. ошибки MySql будут выводиться

3) Командные инъекций

4) XSS (Cross-Site Scripting) - межсайтовый скриптинг
    Атака XSS: добавление к адресу какого-либо javascript
        Защита: при получении данных от пользователя обрабатывать:
            strip_tags() 
            или htmlspecialchars($_POST['content'], ENT_QUOTES, 'UTF-8');

    Доп.:
        - https://www.youtube.com/watch?v=EmJnUqFgaK8
        - https://www.youtube.com/watch?v=EmJnUqFgaK8&list=RDCMUCX6fjZa167tSy_4ryTLcOBw&index=1
    
5) XPath инъекции

6) Инъекции почтовых команд

7) CRLF инъекции

8) Инъекция заголовка узла

9) Инъекция LDAP

