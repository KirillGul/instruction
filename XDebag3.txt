для XDebug 3:
Openserver:
zend_extension = xdebug

xdebug.mode                      = debug, develop
xdebug.client_host              = 127.0.0.1
xdebug.client_port              = 9000
xdebug.discover_client_host     = true //не обязательно не понятно что
xdebug.start_with_request       = yes
xdebug.idekey                   = VSCODE //не обязательно не понятно что
xdebug.default_enable           = on //для красивого отображения в браузере

P.S. Погуглите xdebug + var_dump + color


Composer:
---------
Основные команды:
https://phpprofi.ru/blogs/post/52

Семантическое версионирование:
Пример: 7.1.4
7 - мажорная версия (большие глобальные изменения пакета, типа добавления или удаления класса, метода)
1 - минорная версия (добавление методов)
4 - патчи (мелкие исправления)

* - последняя версия
~ - последняя патчевая версия
^ - последняя минорная версия и патчевая верия
< > = - тоже для указания версий

Параментры стабильности проекта:
@dev - разработка
@alpha - не протестированная версия
@beta - протестированная версия
@rc - очень стабильная версия
@stable - стабильная версия

composer about - краткая информация о composer
composer -V - версия composer
composer help <команда> - отображет справку для всех команд
composer init - создает базовый вариант файла composer.json в текущем каталоге
composer require vendor/package [--dev] - Добавляет требуемый пакет в файл composer.json и устанавливает его в ваш проект.
    Команда require изменяет composer.json, находящийся в текущей папке. Если пакету требуются зависимости, то они будут установлены или обновлены. А также будет обновлён composer.lock.
    --dev - флаг указывающий на необходимость установки в секцию require-dev
composer install [--no-dev] - eсли файла composer.lock нет, резолвит зависимости исходя из composer.json и создаёт его.
    Далее, анализирует файл composer.lock, скачивает и устанавливает указанные в нём версии пакетов.
    Опция --no-scripts полезна для обхода запуска скриптов, указанных в pre- и post- настройках.
    --no-dev - не устанавливать пакеты из секции require-dev
composer update - 	Обновляет ваши зависимости до последних версий и обновляет composer.lock.
    Команда update резолвит зависимости чтобы получить самые последние версии зависящих друг от друга пакетов.
composer run-script post-update-cmd - запуск каманд из данное секции файла composer.json
composer diagnose - тестирование composer на необходимые компоненты
composer validate - валидация composer.json файла
composer self-update - обновление самого composer
composer create-project vendor/package dir/ - Создать новый проект из указанного пакета в указанном каталоге.

Пример файла composer.json:
{
    "minimum-stability": "dev", //указывается минимально стабильная версия для установки
    "prefer-stable": true,      //указываетс использовать по возможности стабильную версию
    "require": {                //подключаемые и загружаемые версии пакетов которые нужны для работы системы
        "guzzlehttp:/guzzle": "~7.3.0"
    },
    "require-dev": {            //пакеты которые нужны только на статии разработки
        "phpunit/phpunit": "^9.5"
    },
    "scripts": {                //выполнение каманды при установке в определенный момент
        "pre-update-cmd": [
                "php -r \"echo 'Какието сведения' \"";
        ],
        "post-update-cmd": [
            "php -v"
        ]
    },
    "config": {                 //можно изменят настройки самого composer
        
    }
}